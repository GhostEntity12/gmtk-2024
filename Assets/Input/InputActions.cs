//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GeneralGameplay"",
            ""id"": ""31c4dfdb-3a94-41ef-b9b4-c48243a55a8f"",
            ""actions"": [
                {
                    ""name"": ""SwingCamera"",
                    ""type"": ""Button"",
                    ""id"": ""b1ff7567-e7f8-4680-ba81-37077ed1ac83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7583e00c-df3d-466c-b5e2-99a5644b3a26"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwingCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Counter"",
            ""id"": ""3aac7470-7c1b-4faa-829f-256b7f36e313"",
            ""actions"": [
                {
                    ""name"": ""Serve"",
                    ""type"": ""Button"",
                    ""id"": ""bbc543ac-c9c6-47e3-be06-fd49a7ffb0da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22ffd9aa-2c50-444b-9b41-424d4760d8ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Serve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ray"",
            ""id"": ""87ae3799-d28a-4f1d-9697-fd1240b64076"",
            ""actions"": [
                {
                    ""name"": ""Shrink"",
                    ""type"": ""Button"",
                    ""id"": ""710e09dc-03d0-4c8c-8d4e-3d89decedbe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""bbfdccec-9976-45af-9ec4-8847e50b5f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1d6c724-40a9-442b-8466-8333b5a96dec"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shrink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3947910c-0b17-4022-b85f-a13220845315"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""19156566-84cf-47a3-9f55-8b05e0a59f93"",
            ""actions"": [
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""c67bab24-506e-4bf4-bbbb-04df39ab8b6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""U"",
                    ""type"": ""Button"",
                    ""id"": ""bb93be9d-3838-4441-9ab1-8b15337d0f98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""I"",
                    ""type"": ""Button"",
                    ""id"": ""2791bc49-b838-4f2c-b976-7c9a34488454"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""O"",
                    ""type"": ""Button"",
                    ""id"": ""ea558ab9-b9a1-4568-a08a-c44374165434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P"",
                    ""type"": ""Button"",
                    ""id"": ""11a935a5-6d4e-4c88-af1d-ca6315eb537a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e24436e0-4980-41a7-99bd-a293e810b823"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""U"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0f68419-25ba-4ad2-b681-565807c8738c"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""O"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb09880e-007b-4498-af30-4b2162f6435d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dce8cae-9177-46b1-9f73-7faf4e1b6981"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""I"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cefee580-0d41-44fd-8836-61dc93a1f8f0"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GeneralGameplay
        m_GeneralGameplay = asset.FindActionMap("GeneralGameplay", throwIfNotFound: true);
        m_GeneralGameplay_SwingCamera = m_GeneralGameplay.FindAction("SwingCamera", throwIfNotFound: true);
        // Counter
        m_Counter = asset.FindActionMap("Counter", throwIfNotFound: true);
        m_Counter_Serve = m_Counter.FindAction("Serve", throwIfNotFound: true);
        // Ray
        m_Ray = asset.FindActionMap("Ray", throwIfNotFound: true);
        m_Ray_Shrink = m_Ray.FindAction("Shrink", throwIfNotFound: true);
        m_Ray_Grow = m_Ray.FindAction("Grow", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_Y = m_Debug.FindAction("Y", throwIfNotFound: true);
        m_Debug_U = m_Debug.FindAction("U", throwIfNotFound: true);
        m_Debug_I = m_Debug.FindAction("I", throwIfNotFound: true);
        m_Debug_O = m_Debug.FindAction("O", throwIfNotFound: true);
        m_Debug_P = m_Debug.FindAction("P", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GeneralGameplay
    private readonly InputActionMap m_GeneralGameplay;
    private List<IGeneralGameplayActions> m_GeneralGameplayActionsCallbackInterfaces = new List<IGeneralGameplayActions>();
    private readonly InputAction m_GeneralGameplay_SwingCamera;
    public struct GeneralGameplayActions
    {
        private @InputActions m_Wrapper;
        public GeneralGameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwingCamera => m_Wrapper.m_GeneralGameplay_SwingCamera;
        public InputActionMap Get() { return m_Wrapper.m_GeneralGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralGameplayActionsCallbackInterfaces.Add(instance);
            @SwingCamera.started += instance.OnSwingCamera;
            @SwingCamera.performed += instance.OnSwingCamera;
            @SwingCamera.canceled += instance.OnSwingCamera;
        }

        private void UnregisterCallbacks(IGeneralGameplayActions instance)
        {
            @SwingCamera.started -= instance.OnSwingCamera;
            @SwingCamera.performed -= instance.OnSwingCamera;
            @SwingCamera.canceled -= instance.OnSwingCamera;
        }

        public void RemoveCallbacks(IGeneralGameplayActions instance)
        {
            if (m_Wrapper.m_GeneralGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralGameplayActions @GeneralGameplay => new GeneralGameplayActions(this);

    // Counter
    private readonly InputActionMap m_Counter;
    private List<ICounterActions> m_CounterActionsCallbackInterfaces = new List<ICounterActions>();
    private readonly InputAction m_Counter_Serve;
    public struct CounterActions
    {
        private @InputActions m_Wrapper;
        public CounterActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Serve => m_Wrapper.m_Counter_Serve;
        public InputActionMap Get() { return m_Wrapper.m_Counter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CounterActions set) { return set.Get(); }
        public void AddCallbacks(ICounterActions instance)
        {
            if (instance == null || m_Wrapper.m_CounterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CounterActionsCallbackInterfaces.Add(instance);
            @Serve.started += instance.OnServe;
            @Serve.performed += instance.OnServe;
            @Serve.canceled += instance.OnServe;
        }

        private void UnregisterCallbacks(ICounterActions instance)
        {
            @Serve.started -= instance.OnServe;
            @Serve.performed -= instance.OnServe;
            @Serve.canceled -= instance.OnServe;
        }

        public void RemoveCallbacks(ICounterActions instance)
        {
            if (m_Wrapper.m_CounterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICounterActions instance)
        {
            foreach (var item in m_Wrapper.m_CounterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CounterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CounterActions @Counter => new CounterActions(this);

    // Ray
    private readonly InputActionMap m_Ray;
    private List<IRayActions> m_RayActionsCallbackInterfaces = new List<IRayActions>();
    private readonly InputAction m_Ray_Shrink;
    private readonly InputAction m_Ray_Grow;
    public struct RayActions
    {
        private @InputActions m_Wrapper;
        public RayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shrink => m_Wrapper.m_Ray_Shrink;
        public InputAction @Grow => m_Wrapper.m_Ray_Grow;
        public InputActionMap Get() { return m_Wrapper.m_Ray; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RayActions set) { return set.Get(); }
        public void AddCallbacks(IRayActions instance)
        {
            if (instance == null || m_Wrapper.m_RayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RayActionsCallbackInterfaces.Add(instance);
            @Shrink.started += instance.OnShrink;
            @Shrink.performed += instance.OnShrink;
            @Shrink.canceled += instance.OnShrink;
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
        }

        private void UnregisterCallbacks(IRayActions instance)
        {
            @Shrink.started -= instance.OnShrink;
            @Shrink.performed -= instance.OnShrink;
            @Shrink.canceled -= instance.OnShrink;
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
        }

        public void RemoveCallbacks(IRayActions instance)
        {
            if (m_Wrapper.m_RayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRayActions instance)
        {
            foreach (var item in m_Wrapper.m_RayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RayActions @Ray => new RayActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_Y;
    private readonly InputAction m_Debug_U;
    private readonly InputAction m_Debug_I;
    private readonly InputAction m_Debug_O;
    private readonly InputAction m_Debug_P;
    public struct DebugActions
    {
        private @InputActions m_Wrapper;
        public DebugActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Y => m_Wrapper.m_Debug_Y;
        public InputAction @U => m_Wrapper.m_Debug_U;
        public InputAction @I => m_Wrapper.m_Debug_I;
        public InputAction @O => m_Wrapper.m_Debug_O;
        public InputAction @P => m_Wrapper.m_Debug_P;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @U.started += instance.OnU;
            @U.performed += instance.OnU;
            @U.canceled += instance.OnU;
            @I.started += instance.OnI;
            @I.performed += instance.OnI;
            @I.canceled += instance.OnI;
            @O.started += instance.OnO;
            @O.performed += instance.OnO;
            @O.canceled += instance.OnO;
            @P.started += instance.OnP;
            @P.performed += instance.OnP;
            @P.canceled += instance.OnP;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @U.started -= instance.OnU;
            @U.performed -= instance.OnU;
            @U.canceled -= instance.OnU;
            @I.started -= instance.OnI;
            @I.performed -= instance.OnI;
            @I.canceled -= instance.OnI;
            @O.started -= instance.OnO;
            @O.performed -= instance.OnO;
            @O.canceled -= instance.OnO;
            @P.started -= instance.OnP;
            @P.performed -= instance.OnP;
            @P.canceled -= instance.OnP;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IGeneralGameplayActions
    {
        void OnSwingCamera(InputAction.CallbackContext context);
    }
    public interface ICounterActions
    {
        void OnServe(InputAction.CallbackContext context);
    }
    public interface IRayActions
    {
        void OnShrink(InputAction.CallbackContext context);
        void OnGrow(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnY(InputAction.CallbackContext context);
        void OnU(InputAction.CallbackContext context);
        void OnI(InputAction.CallbackContext context);
        void OnO(InputAction.CallbackContext context);
        void OnP(InputAction.CallbackContext context);
    }
}
